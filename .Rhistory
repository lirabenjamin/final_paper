install.pacakges("sand")
library(sand)
data(karate)
install.pacakges("sand")
install.pacakges("sand")
install.packages("sand")
library(sand)
data(karate)
#Matrices
# v1 will be yes/no friendship
v1<-as.matrix(get.adjacency(karate))
v1
# install.packages("spatialreg")
library(spatialreg)
library(spdep)
library(igraph)
library(classInt)
library(RColorBrewer)
#Advice
idadvice <- "1dbZDumTH9dFwNStIKKEO9bhx_ftYtLam"
advicelazega <- read.csv(sprintf("https://docs.google.com/uc?id=%s&export=download", idadvice))
advicelazega <- as.matrix(advicelazega)
advicelazegac <- advicelazega
str(advicelazega)
dim(advicelazega)
advicelazega
#Reading attributes also provided by Lazega
idattributes <- "1e0GtrRS5PFFNdnd1e4fJcjeuBZ6deF7g"
datattrout <- read.csv(sprintf("https://docs.google.com/uc?id=%s&export=download", idattributes))
#Transforming the matrices to spatial form (row normalized) as shown in equation (21)
advicelazega <-advicelazega /rowSums(advicelazega)
advicelazega
summary(rowSums(advicelazega))
# Replacing potential NAN to zeros as shown in equation (22)
advicelazega[is.na(advicelazega)]<-0
advicelazega
advicelazega
listwAd<-mat2listw(advicelazega)
# install.packages("spatialreg")
library(spatialreg)
install.packages("spatialreg")
# install.packages("spatialreg")
library(spatialreg)
library(spdep)
library(igraph)
library(classInt)
library(RColorBrewer)
listwAd<-mat2listw(advicelazega)
listwAd
#########
#Testing influence
#########
moran.test(datattrout$HrRATE90,listwAd, zero.policy=TRUE)
datattrout
datattrout$HrRATE90
datattrout$FeesCollec90
#########
#Visualizing Local Moran’s I clusters and outliers
#########
mt <- moran.test(datattrout$FeesCollec90, listwAd, zero.policy=TRUE)
label_x = "Individual Fees Collected"
label_y = "Lagged Individual Fees Collected"
mp <- moran.plot(datattrout$FeesCollec90, listwAd, zero.policy=T,
labels=sub_datattrout$id, xlab = label_x, ylab = label_y)
title(main="Moran’s Plot", cex.main=2, col.main="grey11",
font.main=2, sub=paste("Plot includes 70 lawyers (Moran’s I = ",
round(mt$ estimate[1], 3), ", p < .0001)", sep=""), cex.sub=1.15, col.sub="grey11", font.sub=2,)
knitr::include_graphics("Theoretical Model.pdf")
library(tidyverse)
clean <- read_rds("data/clean.l.rds")
attr <- read_rds("data/clean.rds")
from_ids <- clean %>%
pull(StudyID) %>%
unique()
to_ids <-
clean %>%
select(pn_bf1:pn_scw2) %>%
pivot_longer(everything()) %>%
filter(!is.na(value)) %>%
pull(value) %>%
unique()
length(from_ids)
length(to_ids)
missing_ids <- to_ids[!to_ids %in% from_ids]
missing_attr <- attr[seq_along(missing_ids), ] %>%
mutate_all(~NA) %>%
mutate(StudyID = missing_ids)
attr <- rbind(attr, missing_attr)
colnames(clean)
edgelist <-
clean %>%
# filter(time == "T1", !is.na(scw_s)) %>%
select(StudyID, time, pn_bf1, pn_bf2, pn_scw, pn_scw2)
edgelist <-
edgelist %>%
pivot_longer(pn_bf1:pn_scw2, names_to = "pn", values_to = "value") %>%
filter(!is.na(value)) %>%
mutate(
pn = str_replace(pn, "pn_", ""),
pn = tm::removeNumbers(pn)
) %>%
select(from = StudyID, to = value, time, pn)
library(igraph)
g <- graph_from_data_frame(edgelist, directed = TRUE, vertices = attr)
filter_graph <- function(graph = g, type = "bf", time = "T1") {
time_ids <- which(E(graph)$time == time)
g_r <- subgraph.edges(g, time_ids, delete.vertices = FALSE)
type_ids <- which(E(g_r)$pn == type)
g_r <- subgraph.edges(g_r, type_ids, delete.vertices = FALSE)
return(g_r)
}
g
write_rds(g, "data/graph.rds")
filter_graph(graph = g, type = "scw")
# Load libraries
library(igraph)
library(tidyverse)
library(sna)
filter_graph <- function(graph = g, type = "bf", time = "T1") {
time_ids <- which(E(graph)$time == time)
g_r <- subgraph.edges(g, time_ids, delete.vertices = FALSE)
type_ids <- which(E(g_r)$pn == type)
g_r <- subgraph.edges(g_r, type_ids, delete.vertices = FALSE)
return(g_r)
}
# Load data
g <- read_rds("data/graph.rds")
as.matrix(get.adjacency(filter_graph(g, type = "scw", time = "T3"))) %>%
as_tibble() %>%
mutate(id = colnames(.)) %>%
select(id, everything()) %>%
pivot_longer(-id, names_to = "id2", values_to = "value") %>%
ggplot(aes(x = id, y = id2, fill = value)) +
geom_tile() +
scale_fill_gradient2(
low = "white", mid = "grey", high = "black",
na.value = "white"
) +
theme_void() +
theme(
axis.text.x = element_text(angle = 90, hjust = 1),
panel.grid = element_blank()
) +
labs(title = "BF Adjacency Matrix")
ggsave("example matrix.pdf", width = 10, height = 10)
correlate <- function(graph = g, time = "T1") {
gcor(
as.matrix(get.adjacency(filter_graph(g, type = "bf", time = time))),
as.matrix(get.adjacency(filter_graph(g, type = "scw", time = time))),
mode = "digraph"
)
}
correlate(time = "T1")
correlate(time = "T2")
correlate(time = "T3")
correlate(time = "T4")
